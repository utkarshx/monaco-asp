import { type Module } from 'langium';
import type { LangiumServices, LangiumSharedServices, PartialLangiumServices } from 'langium/lsp';
import { type DefaultSharedModuleContext } from 'langium/lsp';
import { StatemachineValidator } from './statemachine-validator.js';
/**
 * Declaration of custom services - add your own service classes here.
 */
export type StatemachineAddedServices = {
    validation: {
        StatemachineValidator: StatemachineValidator;
    };
};
/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type StatemachineServices = LangiumServices & StatemachineAddedServices;
/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export declare const StatemachineModule: Module<StatemachineServices, PartialLangiumServices & StatemachineAddedServices>;
/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export declare function createStatemachineServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices;
    statemachine: StatemachineServices;
};
//# sourceMappingURL=statemachine-module.d.ts.map