/******************************************************************************
 * This file was generated by langium-cli 3.0.3.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';
export declare const StatemachineTerminals: {
    WS: RegExp;
    ID: RegExp;
    ML_COMMENT: RegExp;
    SL_COMMENT: RegExp;
};
export interface Command extends AstNode {
    readonly $container: Statemachine;
    readonly $type: 'Command';
    name: string;
}
export declare const Command = "Command";
export declare function isCommand(item: unknown): item is Command;
export interface Event extends AstNode {
    readonly $container: Statemachine;
    readonly $type: 'Event';
    name: string;
}
export declare const Event = "Event";
export declare function isEvent(item: unknown): item is Event;
export interface State extends AstNode {
    readonly $container: Statemachine;
    readonly $type: 'State';
    actions: Array<Reference<Command>>;
    name: string;
    transitions: Array<Transition>;
}
export declare const State = "State";
export declare function isState(item: unknown): item is State;
export interface Statemachine extends AstNode {
    readonly $type: 'Statemachine';
    commands: Array<Command>;
    events: Array<Event>;
    init: Reference<State>;
    name: string;
    states: Array<State>;
}
export declare const Statemachine = "Statemachine";
export declare function isStatemachine(item: unknown): item is Statemachine;
export interface Transition extends AstNode {
    readonly $container: State;
    readonly $type: 'Transition';
    event: Reference<Event>;
    state: Reference<State>;
}
export declare const Transition = "Transition";
export declare function isTransition(item: unknown): item is Transition;
export type StatemachineAstType = {
    Command: Command;
    Event: Event;
    State: State;
    Statemachine: Statemachine;
    Transition: Transition;
};
export declare class StatemachineAstReflection extends AbstractAstReflection {
    getAllTypes(): string[];
    protected computeIsSubtype(subtype: string, _supertype: string): boolean;
    getReferenceType(refInfo: ReferenceInfo): string;
    getTypeMetaData(type: string): TypeMetaData;
}
export declare const reflection: StatemachineAstReflection;
//# sourceMappingURL=ast.d.ts.map