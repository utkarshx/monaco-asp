/******************************************************************************
 * This file was generated by langium-cli 3.0.3.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
import { AbstractAstReflection } from 'langium';
export const StatemachineTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};
export const Command = 'Command';
export function isCommand(item) {
    return reflection.isInstance(item, Command);
}
export const Event = 'Event';
export function isEvent(item) {
    return reflection.isInstance(item, Event);
}
export const State = 'State';
export function isState(item) {
    return reflection.isInstance(item, State);
}
export const Statemachine = 'Statemachine';
export function isStatemachine(item) {
    return reflection.isInstance(item, Statemachine);
}
export const Transition = 'Transition';
export function isTransition(item) {
    return reflection.isInstance(item, Transition);
}
export class StatemachineAstReflection extends AbstractAstReflection {
    getAllTypes() {
        return ['Command', 'Event', 'State', 'Statemachine', 'Transition'];
    }
    computeIsSubtype(subtype, _supertype) {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'State:actions': {
                return Command;
            }
            case 'Statemachine:init':
            case 'Transition:state': {
                return State;
            }
            case 'Transition:event': {
                return Event;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'Command': {
                return {
                    name: 'Command',
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case 'Event': {
                return {
                    name: 'Event',
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case 'State': {
                return {
                    name: 'State',
                    properties: [
                        { name: 'actions', defaultValue: [] },
                        { name: 'name' },
                        { name: 'transitions', defaultValue: [] }
                    ]
                };
            }
            case 'Statemachine': {
                return {
                    name: 'Statemachine',
                    properties: [
                        { name: 'commands', defaultValue: [] },
                        { name: 'events', defaultValue: [] },
                        { name: 'init' },
                        { name: 'name' },
                        { name: 'states', defaultValue: [] }
                    ]
                };
            }
            case 'Transition': {
                return {
                    name: 'Transition',
                    properties: [
                        { name: 'event' },
                        { name: 'state' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}
export const reflection = new StatemachineAstReflection();
//# sourceMappingURL=ast.js.map